import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class EmailFilter {
    public static List<String> filterEmails(List<String> emails, String senderAddress) {
        if (emails == null || senderAddress == null || emails.isEmpty()) {
            return Collections.emptyList();
        }

        // Regex pattern for domain extraction (after @)
        Pattern domainPattern = Pattern.compile("@([\\w\\-.]+)");
        Matcher senderMatcher = domainPattern.matcher(senderAddress);
        String senderDomain = senderMatcher.find() ? senderMatcher.group(1) : "";

        // Step 1: Exact match with sender address, ignoring @
        String senderWithoutAt = senderAddress.replace("@", "");
        List<String> filteredEmails = emails.stream()
            .filter(email -> email.replace("@", "").equalsIgnoreCase(senderWithoutAt))
            .collect(Collectors.toList());

        if (!filteredEmails.isEmpty()) {
            return filteredEmails;
        }

        // Step 2: Check for "no data" (case-insensitive)
        Pattern noDataPattern = Pattern.compile("(?i)^no\\s*data$");
        filteredEmails = emails.stream()
            .filter(email -> noDataPattern.matcher(email).matches())
            .collect(Collectors.toList());

        if (!filteredEmails.isEmpty()) {
            return filteredEmails;
        }

        // Step 3: Match by domain if senderDomain is not empty
        if (!senderDomain.isEmpty()) {
            // Regex pattern to match emails with the same domain (case-insensitive)
            String domainRegex = "(?i)@\\Q" + senderDomain + "\\E$";
            Pattern domainMatchPattern = Pattern.compile(domainRegex);
            
            filteredEmails = emails.stream()
                .filter(email -> domainMatchPattern.matcher(email).find())
                .collect(Collectors.toList());
        }

        return filteredEmails.isEmpty() ? Collections.emptyList() : filteredEmails;
    }

    // Example usage
    public static void main(String[] args) {
        List<String> emails = Arrays.asList(
            "test@example.com",
            "user@domain.com",
            "no data",
            "another@domain.com",
            "test2@example.com",
            "No Data",
            "invalid.email@Domain.com",
            "userdomain.com" // Matches user@domain.com when ignoring @
        );
        String senderAddress = "user@domain.com";

        List<String> result = filterEmails(emails, senderAddress);
        System.out.println("Filtered emails (exact match ignoring @): " + result);

        // Test with domain match
        senderAddress = "newuser@domain.com";
        result = filterEmails(emails, senderAddress);
        System.out.println("Filtered emails (domain match): " + result);

        // Test with no matches
        senderAddress = "nonexistent@other.com";
        result = filterEmails(emails, senderAddress);
        System.out.println("Filtered emails (no match): " + result);

        // Test with "no data" sender
        senderAddress = "no data";
        result = filterEmails(emails, senderAddress);
        System.out.println("Filtered emails (no data): " + result);

        // Test with sender without @
        senderAddress = "userdomain.com";
        result = filterEmails(emails, senderAddress);
        System.out.println("Filtered emails (sender without @): " + result);
    }
}