Ko ni mbnd contributing to our continued success


function getAllCountryDetailsSorted() {
  try {
    // Predefined list of all ISO 3166-1 alpha-2 country codes
    const countryCodes = [
      "AF", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ",
      "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BA", "BW", "BV", "BR",
      "IO", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX",
      "CC", "CO", "KM", "CG", "CD", "CK", "CR", "HR", "CU", "CY", "CZ", "DK", "DJ", "DM", "DO",
      "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF",
      "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW",
      "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL",
      "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB",
      "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ",
      "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR",
      "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "NO", "OM", "PK", "PW", "PS",
      "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL",
      "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG",
      "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SE", "CH",
      "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV",
      "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VG", "VI", "WF", "EH",
      "YE", "ZM", "ZW"
    ];

    // Timezone mapping for some countries (default to UTC for others)
    const timeZoneMap = {
      TZ: "Africa/Dar_es_Salaam",
      US: "America/New_York",
      AE: "Asia/Dubai",
      IN: "Asia/Kolkata",
      UK: "Europe/London",
      LB: "Asia/Beirut",
      CM: "Africa/Douala",
    };

    const countryDetails = [];

    // Loop through all country codes
    countryCodes.forEach((countryCode) => {
      // Construct locale
      const locale = `en-${countryCode}`;
      
      // Fetch timezone from map or default to 'UTC'
      const timezone = timeZoneMap[countryCode] || "UTC";
      
      // Fetch country name using Intl.DisplayNames
      const countryName = new Intl.DisplayNames(["en"], { type: "region" }).of(countryCode);

      // Build details object
      countryDetails.push({
        countryCode: countryCode,
        timezone: timezone,
        locale: locale,
        countryName: countryName,
      });
    });

    // Sort the details by country name
    countryDetails.sort((a, b) => a.countryName.localeCompare(b.countryName));

    return countryDetails;
  } catch (error) {
    console.error("Error fetching country details:", error);
    return [];
  }
}

// Example usage: Get all sorted country details
const sortedCountryDetails = getAllCountryDetailsSorted();

// Display sorted country details
console.log(sortedCountryDetails);

function getAllCountryDetailsSorted() {
  try {
    // Predefined list of all ISO 3166-1 alpha-2 country codes
    const countryCodes = [
      "AF", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG", "AR", "AM", "AW", "AU", "AT", "AZ",
      "BS", "BH", "BD", "BB", "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BA", "BW", "BV", "BR",
      "IO", "BN", "BG", "BF", "BI", "KH", "CM", "CA", "CV", "KY", "CF", "TD", "CL", "CN", "CX",
      "CC", "CO", "KM", "CG", "CD", "CK", "CR", "HR", "CU", "CY", "CZ", "DK", "DJ", "DM", "DO",
      "EC", "EG", "SV", "GQ", "ER", "EE", "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF",
      "GA", "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU", "GT", "GG", "GN", "GW",
      "GY", "HT", "HM", "VA", "HN", "HK", "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL",
      "IT", "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW", "KG", "LA", "LV", "LB",
      "LS", "LR", "LY", "LI", "LT", "LU", "MO", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ",
      "MR", "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA", "MZ", "MM", "NA", "NR",
      "NP", "NL", "NC", "NZ", "NI", "NE", "NG", "NU", "NF", "MP", "NO", "OM", "PK", "PW", "PS",
      "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA", "RE", "RO", "RU", "RW", "BL",
      "SH", "KN", "LC", "MF", "PM", "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG",
      "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK", "SD", "SR", "SJ", "SE", "CH",
      "SY", "TW", "TJ", "TZ", "TH", "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TC", "TV",
      "UG", "UA", "AE", "GB", "US", "UM", "UY", "UZ", "VU", "VE", "VN", "VG", "VI", "WF", "EH",
      "YE", "ZM", "ZW"
    ];

    // Timezone mapping for some countries (default to UTC for others)
    const timeZoneMap = {
      TZ: "Africa/Dar_es_Salaam",
      US: "America/New_York",
      AE: "Asia/Dubai",
      IN: "Asia/Kolkata",
      UK: "Europe/London",
      LB: "Asia/Beirut",
      CM: "Africa/Douala",
    };

    const countryDetails = {};

    // Loop through all country codes
    countryCodes.forEach((countryCode) => {
      // Construct locale
      const locale = `en-${countryCode}`;
      
      // Fetch timezone from map or default to 'UTC'
      const timezone = timeZoneMap[countryCode] || "UTC";
      
      // Fetch country name using Intl.DisplayNames
      const countryName = new Intl.DisplayNames(["en"], { type: "region" }).of(countryCode);

      // Add country details in the required format
      countryDetails[countryCode] = {
        timezone: timezone,
        locale: locale,
        countryName: countryName,
      };
    });

    // Convert the object to a string and log it for viewing
    console.log(JSON.stringify(countryDetails, null, 2)
      .replace(/"([A-Z]{2})":/g, '$1:')
      .replace(/"timezone"/g, 'timezone')
      .replace(/"locale"/g, 'locale')
      .replace(/"countryName"/g, 'countryName'));

  } catch (error) {
    console.error("Error fetching country details:", error);
  }
}

// Example usage
getAllCountryDetailsSorted();
function getAllCountryDetailsSorted() {
  try {
    // Full country code to timezone mapping
    const timeZoneMap = {
      AF: "Asia/Kabul",
      AL: "Europe/Tirane",
      DZ: "Africa/Algiers",
      AS: "Pacific/Pago_Pago",
      AD: "Europe/Andorra",
      AO: "Africa/Luanda",
      AI: "America/Anguilla",
      AQ: "Antarctica/South_Pole",
      AG: "America/Antigua",
      AR: "America/Argentina/Buenos_Aires",
      AM: "Asia/Yerevan",
      AW: "America/Aruba",
      AU: "Australia/Sydney",
      AT: "Europe/Vienna",
      AZ: "Asia/Baku",
      BS: "America/Nassau",
      BH: "Asia/Bahrain",
      BD: "Asia/Dhaka",
      BB: "America/Barbados",
      BY: "Europe/Minsk",
      BE: "Europe/Brussels",
      BZ: "America/Belize",
      BJ: "Africa/Porto-Novo",
      BM: "Atlantic/Bermuda",
      BT: "Asia/Thimphu",
      BO: "America/La_Paz",
      BA: "Europe/Sarajevo",
      BW: "Africa/Gaborone",
      BR: "America/Sao_Paulo",
      IO: "Indian/Chagos",
      BN: "Asia/Brunei",
      BG: "Europe/Sofia",
      BF: "Africa/Ouagadougou",
      BI: "Africa/Bujumbura",
      KH: "Asia/Phnom_Penh",
      CM: "Africa/Douala",
      CA: "America/Toronto",
      CV: "Atlantic/Cape_Verde",
      KY: "America/Cayman",
      CF: "Africa/Bangui",
      TD: "Africa/Ndjamena",
      CL: "America/Santiago",
      CN: "Asia/Shanghai",
      CX: "Indian/Christmas",
      CC: "Indian/Cocos",
      CO: "America/Bogota",
      KM: "Indian/Comoro",
      CG: "Africa/Brazzaville",
      CD: "Africa/Kinshasa",
      CK: "Pacific/Rarotonga",
      CR: "America/Costa_Rica",
      HR: "Europe/Zagreb",
      CU: "America/Havana",
      CY: "Asia/Nicosia",
      CZ: "Europe/Prague",
      DK: "Europe/Copenhagen",
      DJ: "Africa/Djibouti",
      DM: "America/Dominica",
      DO: "America/Santo_Domingo",
      EC: "America/Guayaquil",
      EG: "Africa/Cairo",
      SV: "America/El_Salvador",
      GQ: "Africa/Malabo",
      ER: "Africa/Asmara",
      EE: "Europe/Tallinn",
      ET: "Africa/Addis_Ababa",
      FK: "Atlantic/Stanley",
      FO: "Atlantic/Faroe",
      FJ: "Pacific/Fiji",
      FI: "Europe/Helsinki",
      FR: "Europe/Paris",
      GA: "Africa/Libreville",
      GM: "Africa/Banjul",
      GE: "Asia/Tbilisi",
      DE: "Europe/Berlin",
      GH: "Africa/Accra",
      GI: "Europe/Gibraltar",
      GR: "Europe/Athens",
      GL: "America/Godthab",
      GD: "America/Grenada",
      GP: "America/Guadeloupe",
      GU: "Pacific/Guam",
      GT: "America/Guatemala",
      GN: "Africa/Conakry",
      GW: "Africa/Bissau",
      GY: "America/Guyana",
      HT: "America/Port-au-Prince",
      HN: "America/Tegucigalpa",
      HK: "Asia/Hong_Kong",
      HU: "Europe/Budapest",
      IS: "Atlantic/Reykjavik",
      IN: "Asia/Kolkata",
      ID: "Asia/Jakarta",
      IR: "Asia/Tehran",
      IQ: "Asia/Baghdad",
      IE: "Europe/Dublin",
      IL: "Asia/Jerusalem",
      IT: "Europe/Rome",
      JM: "America/Jamaica",
      JP: "Asia/Tokyo",
      JO: "Asia/Amman",
      KZ: "Asia/Almaty",
      KE: "Africa/Nairobi",
      KR: "Asia/Seoul",
      KW: "Asia/Kuwait",
      KG: "Asia/Bishkek",
      LA: "Asia/Vientiane",
      LV: "Europe/Riga",
      LB: "Asia/Beirut",
      LS: "Africa/Maseru",
      LR: "Africa/Monrovia",
      LY: "Africa/Tripoli",
      LT: "Europe/Vilnius",
      LU: "Europe/Luxembourg",
      MO: "Asia/Macau",
      MG: "Indian/Antananarivo",
      MW: "Africa/Blantyre",
      MY: "Asia/Kuala_Lumpur",
      MV: "Indian/Maldives",
      ML: "Africa/Bamako",
      MT: "Europe/Malta",
      MH: "Pacific/Majuro",
      MQ: "America/Martinique",
      MR: "Africa/Nouakchott",
      MU: "Indian/Mauritius",
      YT: "Indian/Mayotte",
      MX: "America/Mexico_City",
      FM: "Pacific/Pohnpei",
      MD: "Europe/Chisinau",
      MC: "Europe/Monaco",
      MN: "Asia/Ulaanbaatar",
      ME: "Europe/Podgorica",
      MS: "America/Montserrat",
      MA: "Africa/Casablanca",
      MZ: "Africa/Maputo",
      MM: "Asia/Yangon",
      NA: "Africa/Windhoek",
      NR: "Pacific/Nauru",
      NP: "Asia/Kathmandu",
      NL: "Europe/Amsterdam",
      NC: "Pacific/Noumea",
      NZ: "Pacific/Auckland",
      NI: "America/Managua",
      NE: "Africa/Niamey",
      NG: "Africa/Lagos",
      NU: "Pacific/Niue",
      NF: "Pacific/Norfolk",
      MP: "Pacific/Saipan",
      NO: "Europe/Oslo",
      OM: "Asia/Muscat",
      PK: "Asia/Karachi",
      PW: "Pacific/Palau",
      PS: "Asia/Gaza",
      PA: "America/Panama",
      PG: "Pacific/Port_Moresby",
      PY: "America/Asuncion",
      PE: "America/Lima",
      PH: "Asia/Manila",
      PL: "Europe/Warsaw",
      PT: "Europe/Lisbon",
      PR: "America/Puerto_Rico",
      QA: "Asia/Qatar",
      RO: "Europe/Bucharest",
      RU: "Europe/Moscow",
      RW: "Africa/Kigali",
      WS: "Pacific/Apia",
      SM: "Europe/San_Marino",
      ST: "Africa/Sao_Tome",
      SA: "Asia/Riyadh",
      SN: "Africa/Dakar",
      RS: "Europe/Belgrade",
      SC: "Indian/Mahe",
      SL: "Africa/Freetown",
      SG: "Asia/Singapore",
      SK: "Europe/Bratislava",
      SI: "Europe/Ljubljana",
      SB: "Pacific/Guadalcanal",
      SO: "Africa/Mogadishu",
      ZA: "Africa/Johannesburg",
      ES: "Europe/Madrid",
      LK: "Asia/Colombo",
      SD: "Africa/Khartoum",
      SR: "America/Paramaribo",
      SE: "Europe/Stockholm",
      CH: "Europe/Zurich",
      SY: "Asia/Damascus",
      TW: "Asia/Taipei",
      TJ: "Asia/Dushanbe",
      TZ: "Africa/Dar_es_Salaam",
      TH: "Asia/Bangkok",
      TL: "Asia/Dili",
      TG: "Africa/Lome",
      TO: "Pacific/Tongatapu",
      TT: "America/Port_of_Spain",
      TN: "Africa/Tunis",
      TR: "Europe/Istanbul",
      TM: "Asia/Ashgabat",
      TC: "America/Grand_Turk",
      TV: "Pacific/Funafuti",
      UG: "Africa/Kampala",
      UA: "Europe/Kiev",
      AE: "Asia/Dubai",
      GB: "Europe/London",
      US: "America/New_York",
      UY: "America/Montevideo",
      UZ: "Asia/Tashkent",
      VU: "Pacific/Efate",
      VE: "America/Caracas",
      VN: "Asia/Ho_Chi_Minh",
      VG: "America/Tortola",
      WF: "Pacific/Wallis",
      YE: "Asia/Aden",
      ZM: "Africa/Lusaka",
      ZW: "Africa/Harare",
    };

    return timeZoneMap;
  } catch {}.

You can use the comprehensive timezone map provided in the code snippet above for fetching timezones for most countries. If you're still seeing `UTC` for all entries, ensure the following:

1. **Dynamic Mapping is Being Used**:
   The provided `timeZoneMap` should be checked against the country codes dynamically. Ensure that you're passing the correct country code to fetch the associated timezone.

2. **Integration in the Function**:
   Here's how you can use this updated `timeZoneMap` in your function:

```javascript
function getCountryDetails(countryCode) {
  try {
    // Comprehensive timezone map
    const timeZoneMap = {
      AD: "Europe/Andorra",
      AE: "Asia/Dubai",
      AF: "Asia/Kabul",
      // Include other entries from the full map
      TZ: "Africa/Dar_es_Salaam",
      US: "America/New_York",
      IN: "Asia/Kolkata",
    };

    // Construct locale
    const locale = `en-${countryCode}`;

    // Fetch timezone from map
    const timezone = timeZoneMap[countryCode] || "UTC"; // Default to UTC if not mapped

    // Fetch country name dynamically
    const countryName = new Intl.DisplayNames(["en"], { type: "region" }).of(countryCode);

    return {
      timezone,
      locale,
      countryName,
    };
  } catch (error) {
    console.error("Error fetching country details:", error);
    return null;
  }
}

// Example usage for Tanzania (TZ)
console.log(getCountryDetails("TZ"));



------

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.transaction.Transactional;
import java.util.List;
import java.util.logging.Logger;

@ApplicationScoped
public class EmailRepository {

    @Inject
    EntityManager entityManager;

    private static final Logger LOGGER = Logger.getLogger(EmailRepository.class.getName());

    /**
     * Retrieves an email ID based on given parameters.
     * - Converts inputs to lowercase and trims whitespace.
     * - Fetches email from MasterTable first; if not found, fetch from EmailTeamInfoTable.
     * - Handles exceptions to ensure smooth execution.
     *
     * @param pupilWiseId     Unique identifier (trimmed & lowercased).
     * @param country         Country code (trimmed & lowercased).
     * @param businessFunction Business function (trimmed & lowercased).
     * @param workGroup       Workgroup (trimmed & lowercased).
     * @return The email ID if found, otherwise null.
     */
    @Transactional
    public String getEmail(String pupilWiseId, String country, String businessFunction, String workGroup) {
        try {
            // Convert inputs to lowercase & trim to avoid mismatches
            pupilWiseId = pupilWiseId == null ? null : pupilWiseId.trim().toLowerCase();
            country = country == null ? null : country.trim().toLowerCase();
            businessFunction = businessFunction == null ? null : businessFunction.trim().toLowerCase();
            workGroup = workGroup == null ? null : workGroup.trim().toLowerCase();

            if (pupilWiseId == null || country == null || businessFunction == null) {
                LOGGER.warning("Invalid input: Missing required parameters.");
                return null;
            }

            // Define applicable business functions (Cash includes both Cash & CMS)
            List<String> businessFunctions = ("cash".equals(businessFunction) || "cms".equals(businessFunction))
                    ? List.of("cash", "cms")
                    : List.of(businessFunction);

            // **Step 1: Check MasterTable for Generic Email ID**
            try {
                String genericEmail = entityManager.createQuery(
                        "SELECT LOWER(TRIM(m.genericEmailId)) FROM MasterTable m " +
                                "WHERE LOWER(TRIM(m.pupilWiseId)) = :pupilWiseId " +
                                "AND LOWER(TRIM(m.country)) = :country " +
                                "AND LOWER(TRIM(m.businessFunction)) IN :businessFunctions",
                        String.class)
                        .setParameter("pupilWiseId", pupilWiseId)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions)
                        .setMaxResults(1)
                        .getSingleResult();

                if (genericEmail != null) {
                    return genericEmail; // ✅ Return if found
                }
            } catch (NoResultException e) {
                // No data found, continue to EmailTeamInfoTable
            }

            // **Step 2: Fetch from EmailTeamInfoTable as fallback**
            StringBuilder query = new StringBuilder(
                    "SELECT LOWER(TRIM(e.emailId)) FROM EmailTeamInfoTable e " +
                            "WHERE LOWER(TRIM(e.country)) = :country " +
                            "AND LOWER(TRIM(e.businessFunction)) IN :businessFunctions ");

            // Apply team filter only if WorkGroup is 'A'
            if ("a".equals(workGroup)) {
                query.append("AND LOWER(TRIM(e.team)) = 'abc'");
            }

            try {
                return entityManager.createQuery(query.toString(), String.class)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions)
                        .setMaxResults(1)
                        .getSingleResult();
            } catch (NoResultException e) {
                return null; // No email found
            }

        } catch (Exception e) {
            LOGGER.severe("Error fetching email: " + e.getMessage());
            return null;
        }
    }
}

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.transaction.Transactional;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@ApplicationScoped
public class EmailRepository {

    @Inject
    EntityManager entityManager;

    private static final Logger LOGGER = Logger.getLogger(EmailRepository.class.getName());

    /**
     * Retrieves a list of email IDs based on given parameters.
     * - Handles multiple email columns in EmailTeamInfoTable.
     * - Parses comma-separated emails into a list.
     * - Trims and lowercases all values for consistency.
     * - Maps "FMO" and "Market" both to ["FMO", "Markets"].
     *
     * @param pupilWiseId      Unique identifier (trimmed & lowercased).
     * @param country          Country code (trimmed & lowercased).
     * @param businessFunction Business function (trimmed & lowercased).
     * @param workGroup        Workgroup (trimmed & lowercased).
     * @return A list of email IDs if found, otherwise an empty list.
     */
    @Transactional
    public List<String> getEmailList(String pupilWiseId, String country, String businessFunction, String workGroup) {
        try {
            // Convert inputs to lowercase & trim to avoid mismatches
            pupilWiseId = cleanString(pupilWiseId);
            country = cleanString(country);
            businessFunction = cleanString(businessFunction);
            workGroup = cleanString(workGroup);

            if (pupilWiseId == null || country == null || businessFunction == null) {
                LOGGER.warning("Invalid input: Missing required parameters.");
                return Collections.emptyList();
            }

            // Define applicable business functions
            List<String> businessFunctions = getMappedBusinessFunctions(businessFunction);

            // **Step 1: Check Master Table for Generic Email ID**
            try {
                String genericEmails = entityManager.createQuery(
                        "SELECT LOWER(TRIM(m.genericEmailId)) FROM MasterTable m " +
                                "WHERE LOWER(TRIM(m.pupilWiseId)) = :pupilWiseId " +
                                "AND LOWER(TRIM(m.country)) = :country " +
                                "AND LOWER(TRIM(m.businessFunction)) IN :businessFunctions",
                        String.class)
                        .setParameter("pupilWiseId", pupilWiseId)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions)
                        .setMaxResults(1)
                        .getSingleResult();

                if (genericEmails != null && !genericEmails.isBlank()) {
                    return splitAndCleanEmails(genericEmails); // ✅ Return parsed list
                }
            } catch (NoResultException e) {
                // No data found, continue to EmailTeamInfoTable
            }

            // **Step 2: Fetch multiple email columns from EmailTeamInfoTable**
            StringBuilder query = new StringBuilder(
                    "SELECT LOWER(TRIM(e.emailId)), LOWER(TRIM(e.additionalEmailId)) FROM EmailTeamInfoTable e " +
                            "WHERE LOWER(TRIM(e.country)) = :country " +
                            "AND LOWER(TRIM(e.businessFunction)) IN :businessFunctions ");

            // Apply team filter only if WorkGroup is 'A'
            if ("a".equals(workGroup)) {
                query.append("AND LOWER(TRIM(e.team)) = 'abc'");
            }

            try {
                List<Object[]> results = entityManager.createQuery(query.toString(), Object[].class)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions)
                        .getResultList();

                List<String> emailList = new ArrayList<>();
                for (Object[] row : results) {
                    if (row[0] != null) emailList.addAll(splitAndCleanEmails(row[0].toString()));
                    if (row[1] != null) emailList.addAll(splitAndCleanEmails(row[1].toString()));
                }

                return emailList; // ✅ Return list of emails

            } catch (NoResultException e) {
                return Collections.emptyList(); // No emails found
            }

        } catch (Exception e) {
            LOGGER.severe("Error fetching email: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * Maps business functions:
     * - "Cash" → ["Cash", "CMS"]
     * - "CMS" → ["CMS", "Cash"]
     * - "FMO" and "Market" both map to ["FMO", "Markets"]
     * - Otherwise, returns the exact match.
     *
     * @param businessFunction Business function name.
     * @return A list of equivalent business functions.
     */
    private List<String> getMappedBusinessFunctions(String businessFunction) {
        switch (businessFunction) {
            case "cash":
            case "cms":
                return List.of("cash", "cms");
            case "fmo":
            case "market":
                return List.of("fmo", "markets");
            default:
                return List.of(businessFunction);
        }
    }

    /**
     * Cleans a string:
     * - Trims leading and trailing whitespace.
     * - Converts to lowercase.
     * - Returns null if empty or null.
     *
     * @param value The input string.
     * @return The cleaned string or null.
     */
    private String cleanString(String value) {
        return (value == null || value.trim().isEmpty()) ? null : value.trim().toLowerCase();
    }

    /**
     * Splits a comma-separated email string into a list.
     * - Removes whitespace & converts to lowercase.
     * - Filters out empty or invalid values.
     *
     * @param emailString Comma-separated email IDs.
     * @return List of valid email IDs.
     */
    private List<String> splitAndCleanEmails(String emailString) {
        return Arrays.stream(emailString.split(","))
                .map(String::trim)
                .map(String::toLowerCase)
                .filter(email -> !email.isEmpty())
                .collect(Collectors.toList());
    }
}

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.transaction.Transactional;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;

@ApplicationScoped
public class EmailRepository {

    @Inject
    EntityManager entityManager;

    private static final Logger LOGGER = Logger.getLogger(EmailRepository.class.getName());

    /**
     * Retrieves a sorted and distinct list of email IDs based on given parameters.
     * - Filters `EmailTeamInfoTable` based on workgroup-specific team rules.
     * - Handles multiple rows with comma-separated email parsing.
     * - Ensures results are **distinct and sorted** alphabetically.
     *
     * @param pupilWiseId      Unique identifier (trimmed & lowercased).
     * @param country          Country code (trimmed & lowercased).
     * @param businessFunction Business function (trimmed & lowercased).
     * @param workGroup        Workgroup (trimmed & lowercased).
     * @return A **sorted, distinct** list of email IDs.
     */
    @Transactional
    public List<String> getEmailList(String pupilWiseId, String country, String businessFunction, String workGroup) {
        try {
            // Convert inputs to lowercase & trim to avoid mismatches
            pupilWiseId = cleanString(pupilWiseId);
            country = cleanString(country);
            businessFunction = cleanString(businessFunction);
            workGroup = cleanString(workGroup);

            if (pupilWiseId == null || country == null || businessFunction == null) {
                LOGGER.warning("Invalid input: Missing required parameters.");
                return Collections.emptyList();
            }

            // Define applicable business functions
            List<String> businessFunctions = getMappedBusinessFunctions(businessFunction);

            // **Step 1: Check Master Table for Generic Email ID**
            try {
                String genericEmails = entityManager.createQuery(
                        "SELECT LOWER(TRIM(m.genericEmailId)) FROM MasterTable m " +
                                "WHERE LOWER(TRIM(m.pupilWiseId)) = :pupilWiseId " +
                                "AND LOWER(TRIM(m.country)) = :country " +
                                "AND LOWER(TRIM(m.businessFunction)) IN :businessFunctions",
                        String.class)
                        .setParameter("pupilWiseId", pupilWiseId)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions)
                        .setMaxResults(1)
                        .getSingleResult();

                if (genericEmails != null && !genericEmails.isBlank()) {
                    return splitSortAndCleanEmails(genericEmails); // ✅ Return parsed list
                }
            } catch (NoResultException e) {
                // No data found, continue to EmailTeamInfoTable
            }

            // **Step 2: Fetch multiple rows from EmailTeamInfoTable**
            StringBuilder query = new StringBuilder(
                    "SELECT LOWER(TRIM(e.emailId)) FROM EmailTeamInfoTable e " +
                            "WHERE LOWER(TRIM(e.country)) = :country " +
                            "AND LOWER(TRIM(e.businessFunction)) IN :businessFunctions ");

            // Apply workgroup-specific team filter
            String teamFilter = getTeamFilter(businessFunctions, workGroup);
            if (teamFilter != null) {
                query.append("AND LOWER(TRIM(e.team)) = :teamFilter ");
            }

            try {
                var q = entityManager.createQuery(query.toString(), String.class)
                        .setParameter("country", country)
                        .setParameter("businessFunctions", businessFunctions);

                if (teamFilter != null) {
                    q.setParameter("teamFilter", teamFilter);
                }

                List<String> emailList = q.getResultList();

                return emailList.stream()
                        .flatMap(email -> splitSortAndCleanEmails(email).stream()) // ✅ Clean, Split & Sort
                        .distinct() // ✅ Ensure Unique Emails
                        .sorted()   // ✅ Sort Alphabetically
                        .collect(Collectors.toList());

            } catch (NoResultException e) {
                return Collections.emptyList(); // No emails found
            }

        } catch (Exception e) {
            LOGGER.severe("Error fetching email: " + e.getMessage());
            return Collections.emptyList();
        }
    }

    /**
     * Maps business functions:
     * - "Cash" → ["Cash", "CMS"]
     * - "CMS" → ["CMS", "Cash"]
     * - "FMO" and "Market" both map to ["FMO", "Markets"]
     * - Otherwise, returns the exact match.
     *
     * @param businessFunction Business function name.
     * @return A list of equivalent business functions.
     */
    private List<String> getMappedBusinessFunctions(String businessFunction) {
        switch (businessFunction) {
            case "cash":
            case "cms":
                return List.of("cash", "cms");
            case "fmo":
            case "market":
                return List.of("fmo", "markets");
            default:
                return List.of(businessFunction);
        }
    }

    /**
     * Determines the team filter based on business function and workgroup.
     * - If BusinessFunction contains ["Cash", "CMS"] and WorkGroup is "cash_client" → Apply Team "A"
     * - If BusinessFunction contains ["Cash", "CMS"] and WorkGroup is "cash2" → Apply Team "B"
     * - Otherwise, no team filter applied.
     *
     * @param businessFunctions List of business functions.
     * @param workGroup         Workgroup name.
     * @return The team filter value or null if no filter.
     */
    private String getTeamFilter(List<String> businessFunctions, String workGroup) {
        if (businessFunctions.contains("cash") && businessFunctions.contains("cms")) {
            if ("cash_client".equals(workGroup)) {
                return "a";
            } else if ("cash2".equals(workGroup)) {
                return "b";
            }
        }
        return null; // No team filter applied
    }

    /**
     * Cleans a string:
     * - Trims leading and trailing whitespace.
     * - Converts to lowercase.
     * - Returns null if empty or null.
     *
     * @param value The input string.
     * @return The cleaned string or null.
     */
    private String cleanString(String value) {
        return (value == null || value.trim().isEmpty()) ? null : value.trim().toLowerCase();
    }

    /**
     * Splits a comma-separated email string into a distinct, sorted list.
     * - Removes whitespace & converts to lowercase.
     * - Filters out empty or invalid values.
     * - Returns a **sorted and distinct** list.
     *
     * @param emailString Comma-separated email IDs.
     * @return A **sorted, distinct** list of valid email IDs.
     */
    private List<String> splitSortAndCleanEmails(String emailString) {
        return Arrays.stream(emailString.split(","))
                .map(String::trim)
                .map(String::toLowerCase)
                .filter(email -> !email.isEmpty())
                .distinct() // ✅ Ensure Unique Emails
                .sorted()   // ✅ Sort Alphabetically
                .collect(Collectors.toList());
    }
}



