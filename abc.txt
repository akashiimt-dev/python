import java.util.List;
import java.util.Arrays;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.Objects;
import java.util.stream.Stream;

// Class for WorkList items
class WorkListItem {
    String status, userId;
    LocalDateTime createdOn;
    WorkListItem(String status, String userId, LocalDateTime createdOn) {
        this.status = status;
        this.userId = userId;
        this.createdOn = createdOn;
    }
    String getStatus() { return status; }
    String getUserId() { return userId; }
    LocalDateTime getCreatedOn() { return createdOn; }
}

// Class for WorkBasket items
class WorkBasketItem {
    String status, userId;
    LocalDateTime createdOn;
    WorkBasketItem(String status, String userId, LocalDateTime createdOn) {
        this.status = status;
        this.userId = userId;
        this.createdOn = createdOn;
    }
    String getStatus() { return status; }
    String getUserId() { return userId; }
    LocalDateTime getCreatedOn() { return createdOn; }
}

public class WorkAssignment {
    // Optimized function to get the userId of the last assigned task
    public static String getLastAssignedUserId(List<WorkListItem> workList, List<WorkBasketItem> workBasket) {
        // Early return for both null/empty lists
        if ((workList == null || workList.isEmpty()) && (workBasket == null || workBasket.isEmpty())) {
            return "None";
        }

        // Check for pending tasks first
        return Stream.of(
                findFirstPending(workList, WorkListItem::getStatus, WorkListItem::getUserId),
                findFirstPending(workBasket, WorkBasketItem::getStatus, WorkBasketItem::getUserId)
            )
            .filter(Objects::nonNull)
            .findFirst()
            .orElseGet(() -> findMostRecentFmoUserId(workList, workBasket));
    }

    // Helper: Find first pending userId from a list
    private static <T> String findFirstPending(List<T> items, java.util.function.Function<T, String> statusGetter,
                                              java.util.function.Function<T, String> userIdGetter) {
        if (items == null || items.isEmpty()) return null;
        return items.stream()
                .filter(item -> item != null && "pending".equalsIgnoreCase(statusGetter.apply(item))
                        && userIdGetter.apply(item) != null)
                .map(userIdGetter)
                .findFirst()
                .orElse(null);
    }

    // Helper: Find the userId of the most recent FMO task
    private static String findMostRecentFmoUserId(List<WorkListItem> workList, List<WorkBasketItem> workBasket) {
        // Stream WorkListItem for FMO tasks
        String workListResult = workList != null ? workList.stream()
                .filter(item -> item != null && "FMO".equalsIgnoreCase(item.getStatus())
                        && item.getUserId() != null && item.getCreatedOn() != null)
                .max(Comparator.comparing(WorkListItem::getCreatedOn))
                .map(WorkListItem::getUserId)
                .orElse(null) : null;

        // Stream WorkBasketItem for FMO tasks
        String workBasketResult = workBasket != null ? workBasket.stream()
                .filter(item -> item != null && "FMO".equalsIgnoreCase(item.getStatus())
                        && item.getUserId() != null && item.getCreatedOn() != null)
                .max(Comparator.comparing(WorkBasketItem::getCreatedOn))
                .map(WorkBasketItem::getUserId)
                .orElse(null) : null;

        // If both are null, return "None"
        if (workListResult == null && workBasketResult == null) {
            return "None";
        }

        // Compare createdOn to determine the most recent
        LocalDateTime workListTime = workListResult != null && workList != null ? workList.stream()
                .filter(item -> item != null && workListResult.equals(item.getUserId()))
                .map(WorkListItem::getCreatedOn)
                .filter(Objects::nonNull)
                .max(Comparator.naturalOrder())
                .orElse(null) : null;

        LocalDateTime workBasketTime = workBasketResult != null && workBasket != null ? workBasket.stream()
                .filter(item -> item != null && workBasketResult.equals(item.getUserId()))
                .map(WorkBasketItem::getCreatedOn)
                .filter(Objects::nonNull)
                .max(Comparator.naturalOrder())
                .orElse(null) : null;

        if (workListTime != null && (workBasketTime == null || workListTime.isAfter(workBasketTime))) {
            return workListResult;
        }
        return workBasketResult != null ? workBasketResult : "None";
    }

    // Main method for testing
    public static void main(String[] args) {
        // Test case 1: WorkBasket empty, pending task in workList
        List<WorkListItem> workList1 = Arrays.asList(
                new WorkListItem("pending", "User1", LocalDateTime.now().minusDays(1)),
                new WorkListItem("FMO", "User2", LocalDateTime.now().minusDays(2))
        );
        List<WorkBasketItem> workBasket1 = null;
        System.out.println("Test 1 (WorkBasket empty, pending): " + getLastAssignedUserId(workList1, workBasket1)); // Expected: User1

        // Test case 2: WorkList empty, FMO in workBasket
        List<WorkListItem> workList2 = null;
        List<WorkBasketItem> workBasket2 = Arrays.asList(
                new WorkBasketItem("FMO", "User3", LocalDateTime.now().minusDays(1)),
                new WorkBasketItem("investigation", "User4", LocalDateTime.now().minusDays(2))
        );
        System.out.println("Test 2 (WorkList empty, FMO): " + getLastAssignedUserId(workList2, workBasket2)); // Expected: User3

        // Test case 3: Both lists empty
        List<WorkListItem> workList3 = null;
        List<WorkBasketItem> workBasket3 = null;
        System.out.println("Test 3 (Both empty): " + getLastAssignedUserId(workList3, workBasket3)); // Expected: None

        // Test case 4: WorkList has pending, WorkBasket has FMO
        List<WorkListItem> workList4 = Arrays.asList(
                new WorkListItem("pending", "User5", LocalDateTime.now().minusDays(3))
        );
        List<WorkBasketItem> workBasket4 = Arrays.asList(
                new WorkBasketItem("FMO", "User6", LocalDateTime.now().minusDays(1))
        );
        System.out.println("Test 4 (Pending in WorkList): " + getLastAssignedUserId(workList4, workBasket4)); // Expected: User5

        // Test case 5: No pending, FMO in both lists
        List<WorkListItem> workList5 = Arrays.asList(
                new WorkListItem("FMO", "User7", LocalDateTime.now().minusDays(5))
        );
        List<WorkBasketItem> workBasket5 = Arrays.asList(
                new WorkBasketItem("FMO", "User8", LocalDateTime.now().minusDays(1))
        );
        System.out.println("Test 5 (FMO in both): " + getLastAssignedUserId(workList5, workBasket5)); // Expected: User8
    }
}