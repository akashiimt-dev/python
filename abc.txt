@Transactional
public String unlockAssignment(Long caseId, Long inputTaskId, String userId) {
    // Convert numeric caseId to the expected string format for WorkList/WorkBasket
    String caseIdStr = "AC-ZZ-" + String.format("%010d", caseId); // Adjust format as per your data

    // Step 1: Fetch the ActivityCase record
    ActivityCase activityCase;
    try {
        Query caseQuery = entityManager.createQuery(
                "SELECT ac FROM ActivityCase ac WHERE ac.caseId = :caseId", ActivityCase.class);
        caseQuery.setParameter("caseId", caseId);
        activityCase = (ActivityCase) caseQuery.getSingleResult();
        if (activityCase == null) {
            return "Case not found for caseId: " + caseId;
        }
    } catch (Exception e) {
        return "Error retrieving ActivityCase: " + e.getMessage();
    }

    // Step 2: Fetch the specific task from WorkList and WorkBasket
    WorkList workListTask = null;
    WorkBasket workBasketTask = null;

    try {
        // Query WorkList
        Query workListQuery = entityManager.createNativeQuery(
                "SELECT * FROM client_srvc.asign_wl WHERE case_id = :caseId", WorkList.class);
        workListQuery.setParameter("caseId", caseIdStr);
        List<WorkList> workListTasks = workListQuery.getResultList();

        workListTask = workListTasks.stream()
                .filter(task -> {
                    try {
                        String flowType = task.getFlowType();
                        Long taskId = (flowType != null && !flowType.isEmpty())
                                ? Long.parseLong(flowType.split("\"id\":\"")[1].split("\"")[0])
                                : null;
                        return taskId != null && taskId.equals(inputTaskId);
                    } catch (Exception e) {
                        return false;
                    }
                })
                .findFirst()
                .orElse(null);

        // Query WorkBasket
        Query workBasketQuery = entityManager.createNativeQuery(
                "SELECT * FROM client_srvc.asign_wb WHERE case_id = :caseId", WorkBasket.class);
        workBasketQuery.setParameter("caseId", caseIdStr);
        List<WorkBasket> workBasketTasks = workBasketQuery.getResultList();

        workBasketTask = workBasketTasks.stream()
                .filter(task -> {
                    try {
                        String flowType = task.getFlowType();
                        Long taskId = (flowType != null && !flowType.isEmpty())
                                ? Long.parseLong(flowType.split("\"id\":\"")[1].split("\"")[0])
                                : null;
                        return taskId != null && taskId.equals(inputTaskId);
                    } catch (Exception e) {
                        return false;
                    }
                })
                .findFirst()
                .orElse(null);

        if (workListTask == null && workBasketTask == null) {
            return "Task not found in WorkList or WorkBasket for caseId: " + caseIdStr + " and taskId: " + inputTaskId;
        }
    } catch (Exception e) {
        return "Error retrieving tasks: " + e.getMessage();
    }

    // Step 3: Verify the task is locked and the user has permission to unlock
    String lockedBy = null;
    if (workListTask != null && workListTask.getLockedBy() != null) {
        lockedBy = workListTask.getLockedBy();
    } else if (workBasketTask != null && workBasketTask.getLockedBy() != null) {
        lockedBy = workBasketTask.getLockedBy();
    }

    if (lockedBy == null) {
        return "Task is not locked for caseId: " + caseIdStr + " and taskId: " + inputTaskId;
    }

    if (!userId.equals(lockedBy)) {
        return "Task is locked by another user (" + lockedBy + "). Only the locking user can unlock it.";
    }

    // Step 4: Unlock the task and the case
    try {
        // Unlock ActivityCase
        activityCase.setLockedStatus(null);
        activityCase.setLockedBy(null);
        activityCase.setLockedOpname(null);
        activityCase.setLockedOn(null);
        entityManager.merge(activityCase);

        // Unlock the specific task in WorkList or WorkBasket
        if (workListTask != null) {
            workListTask.setLockedBy(null);
            workListTask.setLockedOn(null);
            entityManager.merge(workListTask);
        } else if (workBasketTask != null) {
            workBasketTask.setLockedBy(null);
            workBasketTask.setLockedOn(null);
            entityManager.merge(workBasketTask);
        }
    } catch (PersistenceException e) {
        return "Error unlocking task or case: " + e.getMessage();
    }

    return "Task and case unlocked successfully for user " + userId;
}