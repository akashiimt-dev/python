import java.util.*;
import java.lang.reflect.*;
import java.util.stream.Collectors;

public class EmailSubjectSenderSorter<T> {

    // Assign priority based on subject and property conditions using Streams
    public List<T> getSubjectPriority(List<T> emailList, String subject, String propertyName1, String propertyName2) 
            throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        return emailList.stream()
                .filter(email -> {
                    try {
                        String value1 = getPropertyValue(email, propertyName1);
                        String value2 = getPropertyValue(email, propertyName2);

                        // Check if first property contains "contains" keyword
                        if (value1 != null && value1.toLowerCase().contains("contains")) {
                            return value2 != null && value2.toLowerCase().contains(subject);
                        }
                        // Check if first property contains "equal"
                        else if (value1 != null && value1.toLowerCase().contains("equal")) {
                            return value2 != null && value2.equalsIgnoreCase(subject);
                        }
                        // Include if subject is blank or null
                        else {
                            return value1 == null || value1.trim().isEmpty();
                        }
                    } catch (Exception e) {
                        return false; // Skip on exception
                    }
                })
                .sorted((e1, e2) -> {
                    try {
                        Method getIdMethod = e1.getClass().getMethod("getId");
                        Long id1 = (Long) getIdMethod.invoke(e1);
                        Long id2 = (Long) getIdMethod.invoke(e2);
                        return id2.compareTo(id1); // Sort descending for latest first
                    } catch (Exception e) {
                        return 0; // Default if sorting fails
                    }
                })
                .collect(Collectors.toList());
    }

    // Helper method to get property value using reflection
    @SuppressWarnings("unchecked")
    private String getPropertyValue(Object instance, String propertyName) 
            throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        if (instance == null || propertyName == null) return null;

        String methodName = "get" + propertyName.substring(0, 1).toUpperCase() + propertyName.substring(1);
        Class<?> clazz = instance.getClass();
        Method method = clazz.getMethod(methodName);
        Object result = method.invoke(instance);

        return result != null ? result.toString() : null;
    }
}