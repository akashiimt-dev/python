import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

// WorkBasket Entity
@Entity(name = "work_basket")
public class WorkBasket {

    @jakarta.persistence.Id
    @jakarta.persistence.GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    private Long id;

    @jakarta.persistence.Column(name = "case_id")
    private String caseId;

    @jakarta.persistence.Column(name = "flow_type")
    private String flowType;

    @jakarta.persistence.Column(name = "assign_operator_id")
    private String assignOperatorId;

    @jakarta.persistence.Column(name = "active")
    private String active;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getCaseId() { return caseId; }
    public void setCaseId(String caseId) { this.caseId = caseId; }

    public String getFlowType() { return flowType; }
    public void setFlowType(String flowType) { this.flowType = flowType; }

    public String getAssignOperatorId() { return assignOperatorId; }
    public void setAssignOperatorId(String assignOperatorId) { this.assignOperatorId = assignOperatorId; }

    public String getActive() { return active; }
    public void setActive(String active) { this.active = active; }
}

// WorkList Entity
@Entity(name = "work_list")
public class WorkList {

    @jakarta.persistence.Id
    @jakarta.persistence.GeneratedValue(strategy = jakarta.persistence.GenerationType.IDENTITY)
    private Long id;

    @jakarta.persistence.Column(name = "case_id")
    private String caseId;

    @jakarta.persistence.Column(name = "flow_type")
    private String flowType;

    @jakarta.persistence.Column(name = "assign_operator_id")
    private String assignOperatorId;

    @jakarta.persistence.Column(name = "active")
    private String active;

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getCaseId() { return caseId; }
    public void setCaseId(String caseId) { this.caseId = caseId; }

    public String getFlowType() { return flowType; }
    public void setFlowType(String flowType) { this.flowType = flowType; }

    public String getAssignOperatorId() { return assignOperatorId; }
    public void setAssignOperatorId(String assignOperatorId) { this.assignOperatorId = assignOperatorId; }

    public String getActive() { return active; }
    public void setActive(String active) { this.active = active; }
}

// Service Class
@ApplicationScoped
public class WorkFlowService {

    @Inject
    EntityManager entityManager;

    @Transactional
    public Response processWorkItems(List<WorkBasket> workBasketItems) {
        try {
            if (workBasketItems == null || workBasketItems.isEmpty()) {
                return Response.status(Response.Status.BAD_REQUEST)
                        .entity("Work basket items list is empty or null")
                        .build();
            }

            // Step 1: Validate flow_type and extract step/id asynchronously
            Map<WorkBasket, String[]> validatedItems = new HashMap<>();
            List<CompletableFuture<Void>> validationFutures = workBasketItems.stream()
                    .map(item -> CompletableFuture.runAsync(() -> {
                        if (item.getFlowType() == null || !isValidFlowType(item.getFlowType())) {
                            throw new IllegalArgumentException("Invalid flow_type: " + item.getFlowType());
                        }
                        String step = extractStep(item.getFlowType());
                        String id = extractId(item.getFlowType());
                        if (step == null || id == null) {
                            throw new IllegalArgumentException("Step or ID missing in flow_type: " + item.getFlowType());
                        }
                        synchronized (validatedItems) {
                            validatedItems.put(item, new String[]{step, id});
                        }
                    }))
                    .collect(Collectors.toList());

            CompletableFuture.allOf(validationFutures.toArray(new CompletableFuture[0])).join();
            if (validatedItems.isEmpty()) {
                return Response.status(Response.Status.BAD_REQUEST).entity("Validation failed for all items").build();
            }

            // Step 2: Fetch all relevant WorkBasket and WorkList entries in parallel
            List<String> caseIds = workBasketItems.stream()
                    .map(WorkBasket::getCaseId)
                    .distinct()
                    .collect(Collectors.toList());
            List<String> flowTypes = workBasketItems.stream()
                    .map(WorkBasket::getFlowType)
                    .distinct()
                    .collect(Collectors.toList());

            CompletableFuture<List<WorkBasket>> basketFuture = CompletableFuture.supplyAsync(() -> {
                TypedQuery<WorkBasket> basketQuery = entityManager.createQuery(
                        "SELECT wb FROM work_basket wb WHERE wb.caseId IN :caseIds AND wb.flowType IN :flowTypes AND wb.active = :active",
                        WorkBasket.class);
                basketQuery.setParameter("caseIds", caseIds);
                basketQuery.setParameter("flowTypes", flowTypes);
                basketQuery.setParameter("active", "Y");
                return basketQuery.getResultList();
            });

            CompletableFuture<List<WorkList>> listFuture = CompletableFuture.supplyAsync(() -> {
                TypedQuery<WorkList> listQuery = entityManager.createQuery(
                        "SELECT wl FROM work_list wl WHERE wl.caseId IN :caseIds AND wl.flowType IN :flowTypes AND wl.active = :active",
                        WorkList.class);
                listQuery.setParameter("caseIds", caseIds);
                listQuery.setParameter("flowTypes", flowTypes);
                listQuery.setParameter("active", "Y");
                return listQuery.getResultList();
            });

            CompletableFuture.allOf(basketFuture, listFuture).join();
            List<WorkBasket> basketEntries = basketFuture.get();
            List<WorkList> listEntries = listFuture.get();

            // Step 3: Index entries for quick lookup
            Map<String, WorkBasket> basketMap = new HashMap<>();
            for (WorkBasket entry : basketEntries) {
                String key = entry.getCaseId() + "|" + entry.getFlowType();
                basketMap.put(key, entry);
            }

            Map<String, WorkList> listMap = new HashMap<>();
            for (WorkList entry : listEntries) {
                String key = entry.getCaseId() + "|" + entry.getFlowType();
                listMap.put(key, entry);
            }

            // Step 4: Process items with batching and parallelism
            int batchSize = 100;
            List<CompletableFuture<Void>> processFutures = validatedItems.entrySet().stream()
                    .collect(Collectors.groupingBy(e -> Math.floorDiv(e.getKey().hashCode(), batchSize)))
                    .values().stream()
                    .map(batch -> CompletableFuture.runAsync(() -> {
                        for (Map.Entry<WorkBasket, String[]> entry : batch) {
                            WorkBasket item = entry.getKey();
                            String[] stepAndId = entry.getValue();
                            String step = stepAndId[0];
                            String id = stepAndId[1];
                            String key = item.getCaseId()