In Quarkus, if you want to get data from multiple sources based on a filter applied to one table and then use that filter to retrieve data from another table, you typically use JPA (Java Persistence API) or Panache, which is Quarkus's simplified way to interact with databases.

Hereâ€™s a general approach to achieve this:

### 1. Define Your Entities

Assuming you have two tables, `TableA` and `TableB`, you first need to define the entities corresponding to these tables.

```java
@Entity
public class TableA {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String filterField;
    // other fields, getters, setters
}

@Entity
public class TableB {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long tableAId;
    // other fields, getters, setters
}
```

### 2. Create Repository Interfaces

Use Panache or JPA repositories to interact with these tables.

For Panache:

```java
@ApplicationScoped
public class TableARepository implements PanacheRepository<TableA> {
    // Custom queries or methods if needed
}

@ApplicationScoped
public class TableBRepository implements PanacheRepository<TableB> {
    // Custom queries or methods if needed
}
```

For JPA:

```java
@ApplicationScoped
public class TableARepository {
    @Inject
    EntityManager em;

    public List<TableA> findByFilter(String filter) {
        return em.createQuery("SELECT a FROM TableA a WHERE a.filterField = :filter", TableA.class)
                 .setParameter("filter", filter)
                 .getResultList();
    }
}

@ApplicationScoped
public class TableBRepository {
    @Inject
    EntityManager em;

    public List<TableB> findByTableAId(Long tableAId) {
        return em.createQuery("SELECT b FROM TableB b WHERE b.tableAId = :tableAId", TableB.class)
                 .setParameter("tableAId", tableAId)
                 .getResultList();
    }
}
```

### 3. Service Layer

Create a service that uses these repositories to perform the required operations.

```java
@ApplicationScoped
public class DataService {
    @Inject
    TableARepository tableARepository;
    @Inject
    TableBRepository tableBRepository;

    public List<TableB> getTableBDataBasedOnTableAFilter(String filter) {
        List<TableA> tableAList = tableARepository.findByFilter(filter);
        List<TableB> tableBList = new ArrayList<>();

        for (TableA tableA : tableAList) {
            List<TableB> results = tableBRepository.findByTableAId(tableA.getId());
            tableBList.addAll(results);
        }

        return tableBList;
    }
}
```

### 4. REST Endpoint

Expose this functionality via a REST endpoint if needed.

```java
@Path("/data")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class DataResource {
    @Inject
    DataService dataService;

    @GET
    @Path("/filter/{filter}")
    public List<TableB> getTableBData(@PathParam("filter") String filter) {
        return dataService.getTableBDataBasedOnTableAFilter(filter);
    }
}
```

### Summary

1. Define entities for both tables.
2. Implement repositories or data access methods.
3. Use a service to orchestrate the fetching and filtering logic.
4. Expose the service via a REST endpoint if needed.

By following this approach, you can effectively filter data from one table and use it to retrieve related data from another table in a Quarkus application.